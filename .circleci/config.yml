# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# TODO:  Turn hard coded version strings into variables
# parameters:
#   action:
#     type: enum
#     enum: [build, report]
#     default: build
parameters:
  PYTHON_LATEST_VERSION:
    type: string
    default: "3.13.7"

orbs:
  win: circleci/windows@5.1.0
  macos: circleci/macos@2.5.4
  jira: circleci/jira@2.2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test-linux:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/python:<< pipeline.parameters.PYTHON_LATEST_VERSION >>
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps

    resource_class: large

    steps:
      - checkout

      - run:
          name: "Build and Test Linux"
          command: |
            # rm -rf ~/.pyenv
            # git clone https://github.com/pyenv/pyenv.git ~/.pyenv
            # cd ~/.pyenv && src/configure && make -C src
            # echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
            # echo 'PATH="$HOME/.pyenv/shims:$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
            # echo 'eval "$(pyenv init -)"' >> ~/.bashrc
            # source ~/.bashrc
            curl -sSL https://install.python-poetry.org | POETRY_HOME=${HOME}/.poetry python3 -
            echo 'PATH="$HOME/.poetry/bin:$PATH"' >> ~/.bashrc
            source ~/.bashrc
            cd /home/circleci/.pyenv/plugins/python-build/../.. && git pull && cd -

            echo "Path: $PATH"
            echo "Pyenv: "
            echo $(which pyenv)
            echo "Building Python ${PYTHON_LATEST_VERSION}"

            pyenv update
            PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install -f << pipeline.parameters.PYTHON_LATEST_VERSION >>
            pyenv global << pipeline.parameters.PYTHON_LATEST_VERSION >> << pipeline.parameters.PYTHON_LATEST_VERSION >>

            python --version
            pyenv versions

            pip install -e .
            pip install "mkdocs" "mkdocstrings" "mkdocs-material" "mkdocs-gen-files" "mkdocs-literate-nav" "mkdocs-section-index" "pymdown-extensions" "mkdocs-autorefs" "mkdocs-macros-plugin" "mkdocstrings-python"
            pip install "nox" "nox-poetry" "pytest" "ruff" "pre-commit" "poetry-plugin-export" "pyright"
            cd ~/project
            nox

  build-and-test-macos:
    macos:
      xcode: "26.0.0"
    resource_class: m4pro.medium


    steps:
      # Commands will execute in macOS container
      # with Xcode 14.3.1 installed
      - checkout
      - run:
          name: "Build and Test macOS"
          command: |
            # rm -rf ~/.pyenv
            # git clone https://github.com/pyenv/pyenv.git ~/.pyenv
            # echo 'PATH="$HOME/.poetry/bin:$PATH"' >> ~/.bashrc
            # cd ~/.pyenv && src/configure && make -C src
            # echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
            # echo 'PATH="$HOME/.pyenv/shims:$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
            # echo 'eval "$(pyenv init -)"' >> ~/.bashrc
            # echo 'POETRY_HOME="$HOME/.poetry"' >> ~/.bashrc
            # source ~/.bashrc
            curl -sSL https://install.python-poetry.org | POETRY_HOME=${HOME}/.poetry python3 -
            echo 'PATH="$HOME/.poetry/bin:$PATH"' >> ~/.bashrc
            source ~/.bashrc
            cd /home/circleci/.pyenv/plugins/python-build/../.. && git pull && cd -

            echo "Path: $PATH"
            echo "Pyenv: "
            echo $(which pyenv)
            echo "Building Python ${PYTHON_LATEST_VERSION}"

            # pyenv update
            brew update && brew upgrade pyenv
            PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install -f << pipeline.parameters.PYTHON_LATEST_VERSION >>
            pyenv global << pipeline.parameters.PYTHON_LATEST_VERSION >> << pipeline.parameters.PYTHON_LATEST_VERSION >>

            python --version
            pyenv versions
            # curl -sSL https://install.python-poetry.org | POETRY_HOME=${HOME}/.poetry python3 -

            pip install -e .
            pip install "mkdocs" "mkdocstrings" "mkdocs-material" "mkdocs-gen-files" "mkdocs-literate-nav" "mkdocs-section-index" "pymdown-extensions" "mkdocs-autorefs" "mkdocs-macros-plugin" "mkdocstrings-python"
            pip install "nox" "nox-poetry" "pytest" "ruff" "pre-commit" "poetry-plugin-export" "pyright"
            cd ~/project
            nox

      # - run: echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
      # - run: echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrc
      # - run: echo 'eval "$(pyenv init -)"' >> ~/.zshrc
      # - run: source ~/.zshrc

  build-and-test-windows:
    executor:
      name: win/default
      size: large

    steps:
      - checkout

      - run:
          name: "Build and Test Windows"
          command: |
            # choco install -y python3 --version=3.11.5 --allow-multiple-versions
            # choco install -y python3 --version=3.10.13 --allow-multiple-versions
            choco install -y python313
            # choco install pyenv-win --force -y
            Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
            refreshenv
            # pyenv update
            # pyenv install -f << pipeline.parameters.PYTHON_LATEST_VERSION >>
            # pyenv global << pipeline.parameters.PYTHON_LATEST_VERSION >> << pipeline.parameters.PYTHON_LATEST_VERSION >>
            # pyenv versions
            (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -
            set PATH=%PATH%;%USERPROFILE%\AppData\Roaming\pypoetry\venv\Scripts
            refreshenv
            pip install -e .
            pip install "mkdocs" "mkdocstrings" "mkdocs-material" "mkdocs-gen-files" "mkdocs-literate-nav" "mkdocs-section-index" "pymdown-extensions" "mkdocs-autorefs" "mkdocs-macros-plugin" "mkdocstrings-python"
            pip install "nox" "nox-poetry" "pytest" "ruff" "pre-commit" "poetry-plugin-export" "pyright"
            nox


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-and-test:
    jobs:
      - build-and-test-linux
      - build-and-test-macos
      - build-and-test-windows


